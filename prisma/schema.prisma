datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  failedLogins Int       @default(0) @map("failed_logins")
  
  // Email verification fields
  verificationToken       String?   @map("verification_token")
  verificationTokenExpiry DateTime? @map("verification_token_expiry")
  
  // Password reset fields
  resetToken       String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  USER
}

model JwtSession {
  id         String   @id
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  lastUsedAt DateTime @default(now()) @map("last_used_at")
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  isRevoked  Boolean  @default(false) @map("is_revoked")

  @@index([userId], name: "jwt_sessions_user_id_idx")
  @@map("jwt_sessions")
}
